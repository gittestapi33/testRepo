{
    "id": "2c9180877b78a743017b86e97f924475",
    "name": "ServiceNow SD",
    "description": "ServiceNow SD",
    "type": "ServiceNow SDIM",
    "ownerRef": {
        "type": "IDENTITY",
        "id": "2c9180886c6377f4016c6ca17ebb1f34",
        "name": "Ganesh Pagar"
    },
    "provisioningConfig": {
        "universalManager": false,
        "managedResourceRefs": [
            {
                "type": "SOURCE",
                "id": "2c9180837b73552b017b7883d5cb59f9",
                "name": "SNOW-GaneshPagar-Test"
            }
        ],
        "planInitializerScript": {
            "source": "\n                \n                    import sailpoint.object.Identity;\n                    import sailpoint.object.Link;\n                    import sailpoint.object.IntegrationConfig;\n                    import sailpoint.object.Application;\n                    import sailpoint.api.IdentityService;\n\n                    /**\n                     * Fields\n                     */\n                    String applicationType = \"ServiceNow\";\n                    // Identity attribute on SailPoint/ UserID on ServiceNow\n                    String userId = \"sys_id\";\n\n                    /**\n                     * Get ServiceNow Account name for identity using application type - ServiceNow\n                     */\n                    private String getLinkByAppType(Identity identity) {\n                        if (identity == null) {\n                            return null;\n                        }\n\n                        List links = identity.getLinks();\n                        String linkName = null;\n                        if (links != null ) {\n                            for (Link link : links) {\n                                String appType = link.getApplication().getType();\n                                if (appType != null && appType.equals(applicationType)) {\n                                    if(link.getAttribute(userId) != null) {\n                                        String userName = link.getAttribute(userId);\n                                        if(userName != null) {\n                                            linkName = userName;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n\n                        return linkName;\n                    }\n\n                    /**\n                     * Get ServiceNow Account name for Identity using application name\n                     */\n                    private String getLinkByAppName(Identity identity, String requesterSource) {\n                        if (identity == null) {\n                            return null;\n                        }\n\n                        String linkName = null;\n                        if (requesterSource != null) {\n                            Application app = context.getObjectByName(Application.class, requesterSource);\n                            IdentityService identService = new IdentityService(context);\n                            List links = identService.getLinks(identity, app);\n                            Link link = null;\n                            if (links != null && links.size() > 0) {\n                                link = links.get(0);\n                            }\n\n                            if (link != null) {\n                                String userName = (String) link.getAttribute(userId);\n                                if (userName != null) {\n                                    linkName = userName;\n                                }\n                            }\n                        }\n\n                        return linkName;\n                    }\n\n                    ////////////////////////////////////////////////////////////////\n                    // Main\n                    ////////////////////////////////////////////////////////////////\n                    Map arguments = (Map)plan.getArguments();\n                    List requesterList = plan.getRequesters();\n                    Identity requester = null;\n                    if (requesterList != null) {\n                        requester = requesterList.get(0);\n                        if (requester != null && requester.getName() != null) {\n                            requester = context.getObjectByName(Identity.class, requester.getName());\n                        }\n                    }\n\n                    String appName = integration.getName();\n                    if (appName != null) {\n                        Application appObject = context.getObjectByName(Application.class, appName);\n                        requesterSource = appObject.getAttributeValue(\"requesterSource\");\n                    }\n\n                    // Get ServiceNow Account name\n                    if (requesterSource != null) {\n                        openedBy = getLinkByAppName(requester, requesterSource);\n                        requestedFor = getLinkByAppName(identity, requesterSource);\n                    } else {\n                        openedBy = getLinkByAppType(requester);\n                        requestedFor = getLinkByAppType(identity);\n                    }\n\n                    if (requestedFor != null) {\n                        arguments.put(\"requested_for\", requestedFor);\n                    }\n\n                    if (openedBy != null) {\n                        arguments.put(\"opened_by\", openedBy);\n                    }\n                \n            "
        },
        "noProvisioningRequests": false,
        "provisioningRequestExpiration": 0
    },
    "attributes": {
        "tokenUrl": "https://demo.service-now.com/oauth_token.do",
        "serviceRequest": {
            "checkStatus": {
                "statusMap": {
                    "closed_complete": "Committed",
                    "closed_rejected": "Failed",
                    "requested": "Queued",
                    "in_process": "Queued",
                    "closed_cancelled": "Failed",
                    "closed_incomplete": "Failed",
                    "closed_skipped": "Failed"
                },
                "resource": "/api/now/table/sc_request?number=$ticketId&sysparm_fields=request_state",
                "responseElement": "$.result[0].request_state"
            },
            "provision": {
                "request": {
                    "short_description": "SailPoint Access Request $!plan.arguments.identityRequestId",
                    "opened_by": "$!plan.arguments.opened_by",
                    "req_description": "Service Request created by Service Desk Integration Module (SIM)",
                    "description": "#if($request.operation == 'Create') Create Account on application $request.resource #else For $request.id in application $request.resource #end #if ($request.items) $newline  #foreach ($item in $request.items) #if ($item.name == '*disabled*' && $item.value == 'true') Disable Account. $newline #elseif ($item.name == '*disabled*' && $item.value == 'false') Enable Account. $newline #elseif ($item.name == '*locked*' && $item.value == 'false') Unlock Account. $newline #else $!item.Operation $item.name: $item.value $newline #end #end #else $newline $!request.Operation Account #end",
                    "requested_for": "$!plan.arguments.requested_for"
                },
                "requestRootElement": "items",
                "resource": "/api/x_sap_sdim/sailpoint_cart_js_api/create_ticket",
                "responseElement": "$.result.request_number",
                "catalogItem": {
                    "2c9180837b73552b017b7883d5cb59f9": "5ae12c49db55b600dc513ecf9d961926"
                }
            }
        },
        "ticketType": "serviceRequest",
        "authenticationType": "Basic",
        "connectorClass": "openconnector.connector.servicedesk.ServiceDeskConnector",
        "requesterSource": "2c9180837b73552b017b7883d5cb59f9",
        "url": "https://dev76781.service-now.com",
        "username": "admin"
    },
    "beforeProvisioningRule": null
}